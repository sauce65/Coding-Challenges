#Given an array of strictly the characters 'R', 'G', and 'B', segregate the values of the array so that all the Rs come first, the Gs come second, and the Bs come last. You can only swap elements of the array.

#Do this in linear time and in-place.

#For example, given the array ['G', 'B', 'R', 'R', 'B', 'R', 'G'], it should become ['R', 'R', 'R', 'G', 'G', 'B', 'B'].

lst = ['G', 'B', 'R', 'R', 'B', 'R', 'G']
lst.sort()
lst.reverse() # EASY PEASY, R-G-B is reverse-alphabetical....but what if it isn't so convenient?
# What if it isn't RGB but something that doesn't sort so neatly?
# WHAT IF WE WANT TO OVERCOMPLICATE THE PROBLEM BY GENERALIZING IT TO DEATH???

# See below.  It can be modified to sort any groupings, and it totally violates the in-place, linear-time rule but oh well

r = []
g = []
b = []
for i in lst:
    if i == 'R':
        r.append(i)
    elif i == 'G':
        g.append(i)
    else:
        b.append(i)
lst = r + g + b
print(lst)
