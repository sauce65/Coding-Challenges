# Given an integer k and a string s, find the length of the longest substring that contains at most k distinct characters.
# For example, given s = "abcba" and k = 2, the longest substring with k distinct characters is "bcb".

s = 'abcba'
s = [i for i in s] # breaks the string into individual components

substr = [] # creates list to dump substrings
k = 2 # arbitrary value k referenced in the prompt
for z in range(1, len(s)): # finds every substring
    for i in range(len(s)):
        y = i + z
        if y > len(s):
            pass
        else:
            substr.append(s[i:y])

unique_count = [] # creates list to dump count of unique/distinct characters
for i in substr: # finds count of unique characters
    a = np.array(i)
    u = np.unique(a)
    l = len(u)
    unique_count.append(l)

z = zip(substr, unique_count) # associates unique character count to list item

w = [] # converts zip object z into list w
for i, y in z:
    r = [i, y]
    w.append(r)

v = [] # collects all list items from w whose unique count > k and dumps in v
for i in w:
    if i[1] > k:
        pass
    else:
        v.append(i[0])

u = [len(i) for i in v] # finds length of each list item in v

for i in range(len(v)):
    if u[i] == max(u): # finds the max length in u and returns the value with matching index in v
        print(v[i])
    else:
        pass
